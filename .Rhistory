library(easysorter)
load("~/Dropbox/AndersenLab/LabFolders/Loraina/v3_bleach_threshold/all_data.Rda")
library(easysorter)
library(COPASutils)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(dplyr)
library(cowplot)
source("~/Dropbox/AndersenLab/LabFolders/Katie/scripts_kse/NIL_genotype_plots.R")
source("~/Dropbox/AndersenLab/LabFolders/Katie/scripts_kse/NIL_phenotype_plots.R")
source("~/Dropbox/AndersenLab/LabFolders/Loraina/Scripts/Base_theme.R")
library(cegwas2)
library(cegwas)
library(tidyverse)
library(knitr)
##for haplotype
library(data.table)
library(plyr)
library(tidyverse)
#library(igraph)
library(dplyr)
library(ggplot2)
library(knitr)
library(DT)
library(plotly)
library(ggbeeswarm)
library(cowplot)
library(ComplexHeatmap)
##functions
FineMapplot <- function (fmplot_roi) {
fmplot<-ggplot(fm) +
aes(x = POS/1e6) +
geom_point(aes(fill = VARIANT_LD_WITH_PEAK_MARKER, y = VARIANT_LOG10p), shape = 23, size = 3) +
geom_point(aes(y = VARIANT_LOG10p), shape = 23, size = 3, fill = "red",
data = fm %>% dplyr::filter(PEAK_MARKER == MARKER)) +
scale_fill_viridis_c(name = "R2") +
theme_bw(15)+
labs( x = "Genomic Position (Mb)",
y = expression(-log[10](italic(p))))
return(fmplot)
}
pxg <-function(data) {
test_plot <- data %>%
na.omit() %>%
dplyr::distinct(marker, strain, allele, .keep_all = T) %>%
ggplot(.)+
aes(x=factor(as.character(allele),labels = c("REF","ALT")), y = value, fill = factor(as.character(allele),labels = c("REF","ALT")))+
geom_jitter(position=position_jitterdodge(jitter.width = 1), alpha = .7, size = 0.7)+
geom_boxplot(outlier.alpha = 0, alpha = 0.7)+
scale_fill_manual(values = c("#377EB8", "#E41A1C")) +
facet_grid(~marker)+
theme_bw()+
theme(text = element_text(size=11, color = "black"),
axis.title = element_text(size=13, color = "black"),
axis.text = element_text(size=11, color = "black"),
legend.position = 'none',
strip.text = element_text(size=9.5, color = "black")) +
labs(x="",y = "phenotype")
return(test_plot)
}
# this globally has it so all r messages do not show up :) wow amazing :) love :)
knitr::opts_chunk$set(message = FALSE)
# if I add gaotians haplotype plot comes back to report:
# Note on QTL Haplotype plots: Since all strains used in mappings are swept via conservative definition (swept on chrms I, IV, V, X), all dots are yellow. If mappings include non-swept ("divergent") strains, those strains would have purple dots. Dots are at QTL peak. Each row in plot is a strain, ordered by relatedness position on tree via Gaotian. Red blocks are swept haplotypes in the QTL region.
# processed mappings for trait
processed_mapping <- read.delim("~/Dropbox/AndersenLab/LabFolders/Loraina/Projects/HSFP/Serena_collab/Analysis_Results-20201204_conservative/Mappings/Data/curvature_std_neck_norm_abs_50th_processed_mapping.tsv", header = TRUE)
user_strain_pheno_list <- dplyr::select(processed_mapping, strain, value) %>% dplyr::distinct() %>% na.omit()
# check whether there are user tested strains that have no divergent region data
div_strain_list <- read.delim("~/Dropbox/AndersenLab/LabFolders/Loraina/Projects/HSFP/Serena_collab/Analysis_Results-20201204_conservative/Divergent_and_haplotype/div_isotype_list.txt", header=FALSE, stringsAsFactors=FALSE)
w_div_data_strain <- inner_join(user_strain_pheno_list, div_strain_list, by=c("strain"="V1"))
no_data_strain <- anti_join(user_strain_pheno_list, div_strain_list, by=c("strain"="V1"))
# create an empty dataframe
all_QTL_div <- data.frame(V1=character(),
V2=integer(),
V3=integer(),
V4=character(),
V5=integer(),
stringsAsFactors=FALSE)
strain_QTL_div <- dplyr::filter(all_QTL_div, V4 %in% user_strain_pheno_list$strain)
# curvature_std_neck_norm_abs_50th
QTL_Chrom <- "I"
QTL_Region_start <- 13991011
QTL_Peak <- 15006513
QTL_Region_end <- 15055433
all_QTL_bins <- read.delim("~/Dropbox/AndersenLab/LabFolders/Loraina/Projects/HSFP/Serena_collab/Analysis_Results-20201204_conservative/Divergent_and_haplotype/all_QTL_bins.bed", header=FALSE, stringsAsFactors=FALSE)
# take genomic 1kb bins within the QTL region
# format to the same as div regions
# during spread, this "all_bins" will dictate number of rows in resulting dataframe
region_QTL_bins <- filter(all_QTL_bins, V1==QTL_Chrom & V2 > QTL_Region_start & V3 < QTL_Region_end ) %>% mutate(V4="all_bins", V5=0)
strain_QTL_div <- dplyr::filter(all_QTL_div, V4 %in% user_strain_pheno_list$strain)
# take divergent bins within the QTL region, for all user tested strains
# append all_bins within QTL region to the QTL_div
# spread to short form so each strain is a column, each bin in QTL region is a row, all bins are included.
region_QTL_div <- filter(strain_QTL_div, V1==QTL_Chrom & V2 > QTL_Region_start & V3 < QTL_Region_end ) %>%
dplyr::bind_rows(region_QTL_bins)  %>%
tidyr::spread(V4, V5, fill=0) %>%
select(-all_bins)
# add back user-tested strains that have divergent data but are not divergent within the QTL peak region, therefore left out in previous step
w_div_data_strain_missed <- w_div_data_strain$strain[!(w_div_data_strain$strain %in% names(region_QTL_div))]
for (x in w_div_data_strain_missed){
region_QTL_div[[x]] <- 0
}
# add back user-tested strains that have no divergent data
for (x in no_data_strain$strain){
region_QTL_div[[x]] <- -1
}
# check that all user-tested strains are include now
if (ncol(region_QTL_div) - 3 != nrow(user_strain_pheno_list))
{ print("strain number don't match!!!") }
m <- as.matrix(select(region_QTL_div,-V1,-V2,-V3))
# transpose to the format that heatmap needs
m2 <- t(m)
colnames(m2) <- region_QTL_div$V2
# add REF/ALT annotation
ref_alt <- filter(processed_mapping, peakPOS == QTL_Peak) %>% select(strain, allele) %>% filter(strain %in% row.names(m2))
alt_count <- data.frame(table(ref_alt$allele)) %>% filter(Var1==1)
ref_count <- data.frame(table(ref_alt$allele)) %>% filter(Var1==-1)
ref_alt <- mutate(ref_alt, geno_group = ifelse(allele==1, "ALT", "REF"))  %>% mutate(geno_group_count = ifelse(allele==1, paste0("ALT(", alt_count[1,2], ")"), paste0("REF(", ref_count[1,2], ")"))) %>% select(-allele)
haplotype_in_QTL_region <- read.delim("~/Dropbox/AndersenLab/LabFolders/Loraina/Projects/HSFP/Serena_collab/Analysis_Results-20201204_conservative/Divergent_and_haplotype/haplotype_in_QTL_region.txt", header=FALSE, stringsAsFactors=FALSE) %>% select(-V13)
names(haplotype_in_QTL_region) <- c("chromosome", "start", "stop", "haplotype", "isotype", "plotpoint", "segment", "color", "color_new", "Chrom", "Region_start", "Region_end")
########### filter only tested strains
########### keep rows for this QTL region
############ keep relavent columns for plotting
plot_df <- filter(haplotype_in_QTL_region, Chrom == QTL_Chrom & Region_start == QTL_Region_start) %>%
select(chromosome, start, stop, haplotype, isotype, plotpoint, segment, color, color_new)
########### sort by haplotype of 1st and last segment
plot_df_seg_1 <- plot_df %>% dplyr::arrange(isotype, start) %>%
dplyr::distinct(isotype, .keep_all = TRUE) %>%
dplyr::select(isotype, haplotype) %>%
dplyr::rename(haplotype_start = haplotype)
plot_df_seg_last <- plot_df %>% dplyr::arrange(isotype, -start) %>%
dplyr::distinct(isotype, .keep_all = TRUE) %>%
dplyr::select(isotype, haplotype) %>%
dplyr::rename(haplotype_end = haplotype)
plot_df_sort_order <- inner_join(plot_df_seg_1, plot_df_seg_last) %>%
dplyr::arrange(haplotype_start, haplotype_end) %>%
dplyr::mutate(plotpoint2=row_number()) %>%
inner_join(ref_alt, by=c("isotype"="strain")) %>%
dplyr::group_by(geno_group) %>%
dplyr::mutate(plotpoint3 = rank(plotpoint2)) %>%
ungroup() %>% select(isotype, plotpoint3, geno_group)
########## add new plotpoint back to plot_df
plot_df <- inner_join(plot_df, plot_df_sort_order, by="isotype")
########## relevel REF/ALT
plot_df$geno_group <- factor(plot_df$geno_group, levels=c("REF","ALT"))
#=======================#
# Normal haplotype plot #
#=======================#
mcolor_grp <- plot_df %>% dplyr::select(haplotype, color) %>% dplyr::distinct()
mcolor <- mcolor_grp$color
mcolor_grp2 <- plot_df %>% dplyr::select(haplotype, color_new) %>% dplyr::distinct()
mcolor2 <- mcolor_grp2$color_new
names(mcolor) <- mcolor_grp$haplotype
strain_labels <- plot_df %>%
dplyr::select(isotype, plotpoint3) %>% dplyr::distinct()
p1 <- ggplot(filter(plot_df),
aes(xmin = start, xmax = stop,
ymin = plotpoint3 - 0.5, ymax = plotpoint3 + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor) +
scale_y_continuous(breaks = strain_labels$plotpoint3,
labels = strain_labels$isotype,
expand = c(0, 0)) +
xlab("Position") +
theme_bw() +
coord_cartesian(xlim=c(QTL_Region_start, QTL_Region_end)) +
theme(legend.position="none",
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size=10),
strip.text = element_text(size = 10, face = "bold")) +
geom_vline(xintercept = QTL_Peak) +
facet_grid(geno_group ~ ., scales = "free", space = "free") +
theme(panel.spacing = unit(1, "lines"))
#ggsave(paste0("haplotype_", QTL_Chrom, ".", QTL_Region_start, ".", QTL_Region_end, ".png"), p, height = 30, width = 8)
p2 <- ggplot(filter(plot_df),
aes(xmin = start, xmax = stop,
ymin = plotpoint3 - 0.5, ymax = plotpoint3 + 0.5,
fill = haplotype)) +
geom_rect() +
scale_fill_manual(values = mcolor2) +
scale_y_continuous(breaks = strain_labels$plotpoint3,
labels = strain_labels$isotype,
expand = c(0, 0)) +
xlab("Position") +
theme_bw() +
coord_cartesian(xlim=c(QTL_Region_start, QTL_Region_end)) +
theme(legend.position="none",
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size=10),
strip.text = element_text(size = 10, face = "bold")) +
geom_vline(xintercept = QTL_Peak) +
facet_grid(geno_group ~ ., scales = "free", space = "free") +
theme(panel.spacing = unit(1, "lines"))
title <- ggdraw() +
cowplot::draw_figure_label((paste0(QTL_Chrom,":", QTL_Region_start,"-",QTL_Region_start)),
position = "top.left")
plot_grid(p1, p2, ncol=2)
View(ref_alt)
ref_alt <- filter(processed_mapping, peakPOS == QTL_Peak) %>% select(strain, allele) %>% filter(strain %in% row.names(m2))
View(ref_alt)
View(m2)
View(m)
region_QTL_div$V2
plot_df_sort_order <- inner_join(plot_df_seg_1, plot_df_seg_last) %>%
dplyr::arrange(haplotype_start, haplotype_end) %>%
dplyr::mutate(plotpoint2=row_number()) %>%
inner_join(ref_alt, by=c("isotype"="strain")) %>%
dplyr::group_by(geno_group) %>%
dplyr::mutate(plotpoint3 = rank(plotpoint2)) %>%
ungroup() %>% select(isotype, plotpoint3, geno_group)
all_QTL_bins <- read.delim("~/Dropbox/AndersenLab/LabFolders/Loraina/Projects/HSFP/Serena_collab/Analysis_Results-20201204_conservative/Divergent_and_haplotype/all_QTL_bins.bed", header=FALSE, stringsAsFactors=FALSE)
# take genomic 1kb bins within the QTL region
# format to the same as div regions
# during spread, this "all_bins" will dictate number of rows in resulting dataframe
region_QTL_bins <- filter(all_QTL_bins, V1==QTL_Chrom & V2 > QTL_Region_start & V3 < QTL_Region_end ) %>% mutate(V4="all_bins", V5=0)
strain_QTL_div <- dplyr::filter(all_QTL_div, V4 %in% user_strain_pheno_list$strain)
# take divergent bins within the QTL region, for all user tested strains
# append all_bins within QTL region to the QTL_div
# spread to short form so each strain is a column, each bin in QTL region is a row, all bins are included.
region_QTL_div <- filter(strain_QTL_div, V1==QTL_Chrom & V2 > QTL_Region_start & V3 < QTL_Region_end ) %>%
dplyr::bind_rows(region_QTL_bins)  %>%
tidyr::spread(V4, V5, fill=0) %>%
select(-all_bins)
# add back user-tested strains that have divergent data but are not divergent within the QTL peak region, therefore left out in previous step
w_div_data_strain_missed <- w_div_data_strain$strain[!(w_div_data_strain$strain %in% names(region_QTL_div))]
for (x in w_div_data_strain_missed){
region_QTL_div[[x]] <- 0
}
# add back user-tested strains that have no divergent data
for (x in no_data_strain$strain){
region_QTL_div[[x]] <- -1
}
# check that all user-tested strains are include now
if (ncol(region_QTL_div) - 3 != nrow(user_strain_pheno_list))
{ print("strain number don't match!!!") }
m <- as.matrix(select(region_QTL_div,-V1,-V2,-V3))
# transpose to the format that heatmap needs
m2 <- t(m)
colnames(m2) <- region_QTL_div$V2
# add REF/ALT annotation
ref_alt <- filter(processed_mapping, peakPOS == QTL_Peak) %>% select(strain, allele) %>% filter(strain %in% row.names(m2))
alt_count <- data.frame(table(ref_alt$allele)) %>% filter(Var1==1)
ref_count <- data.frame(table(ref_alt$allele)) %>% filter(Var1==-1)
ref_alt <- mutate(ref_alt, geno_group = ifelse(allele==1, "ALT", "REF"))  %>% mutate(geno_group_count = ifelse(allele==1, paste0("ALT(", alt_count[1,2], ")"), paste0("REF(", ref_count[1,2], ")"))) %>% select(-allele)
haplotype_in_QTL_region <- read.delim("~/Dropbox/AndersenLab/LabFolders/Loraina/Projects/HSFP/Serena_collab/Analysis_Results-20201204_conservative/Divergent_and_haplotype/haplotype_in_QTL_region.txt", header=FALSE, stringsAsFactors=FALSE) %>% select(-V13)
names(haplotype_in_QTL_region) <- c("chromosome", "start", "stop", "haplotype", "isotype", "plotpoint", "segment", "color", "color_new", "Chrom", "Region_start", "Region_end")
plot_df <- filter(haplotype_in_QTL_region, Chrom == QTL_Chrom & Region_start == QTL_Region_start) %>%
select(chromosome, start, stop, haplotype, isotype, plotpoint, segment, color, color_new)
plot_df_seg_1 <- plot_df %>% dplyr::arrange(isotype, start) %>%
dplyr::distinct(isotype, .keep_all = TRUE) %>%
dplyr::select(isotype, haplotype) %>%
dplyr::rename(haplotype_start = haplotype)
plot_df_seg_last <- plot_df %>% dplyr::arrange(isotype, -start) %>%
dplyr::distinct(isotype, .keep_all = TRUE) %>%
dplyr::select(isotype, haplotype) %>%
dplyr::rename(haplotype_end = haplotype)
plot_df_sort_order <- inner_join(plot_df_seg_1, plot_df_seg_last) %>%
dplyr::arrange(haplotype_start, haplotype_end) %>%
dplyr::mutate(plotpoint2=row_number()) %>%
inner_join(ref_alt, by=c("isotype"="strain")) %>%
dplyr::group_by(geno_group) %>%
dplyr::mutate(plotpoint3 = rank(plotpoint2)) %>%
ungroup() %>% select(isotype, plotpoint3, geno_group)
plot_df_sort_order
View(plot_df_sort_order)
library(easysorter)
library(COPASutils)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(dplyr)
library(cowplot)
source("~/Dropbox/AndersenLab/LabFolders/Katie/scripts_kse/NIL_genotype_plots.R")
source("~/Dropbox/AndersenLab/LabFolders/Katie/scripts_kse/NIL_phenotype_plots.R")
source("~/Dropbox/AndersenLab/LabFolders/Loraina/Scripts/Base_theme.R")
load("~/Dropbox/AndersenLab/LabFolders/Loraina/v3_bleach_threshold/all_data.Rda")
# all V3 data from Katie, Clay, Deahan, myself
# from Katie's script
# plot
all_data %>%
tidyr::gather(trait, phenotype, TOF:EXT) %>%
ggplot(.) +
aes(x = phenotype) +
geom_histogram(bins = 150) +
theme_bw() +
facet_grid(~trait, scales = "free")
all_data %>%
tidyr::gather(trait, phenotype, TOF:EXT) %>%
ggplot(.) +
aes(x = phenotype) +
geom_histogram(bins = 150) +
theme_bw() +
facet_grid(person~trait, scales = "free")
